define(["subscribers"],function (subscribers){
	/*
	ACCOUNT
	 */
	/**
	 * [Account Constructor]
	 * @class Account
	 * @param {[type]} a [description]
	 * @param {[type]} b [description]
	 */
	function Account(a,b) {
		/*
		self-invoking constructor
		 */
		if (!(this instanceof Account)) {
			return new Account(a, b);
		} //end: if
		var accountName = b||"default";
		var startingBalance = a;
		var transactions = [];
		var currentBalance = a;
		var self = this;
		/*
		encapsulation with accessors
		 */
		Object.defineProperties(this,{
			accountName: {
				get: function() {return accountName;},
				set: function(val) {accountName = val;}
			},
			startingBalance: {
				get: function() {return startingBalance;},
				set: function(val) {startingBalance = val;}
			},
			transactions: {
				get: function() {return transactions;},
				set: function(val) {transactions = val;}
			},
			currentBalance: {
				get: function() {return currentBalance;},
				set: function(val) {currentBalance = val;}
			}
		});//end: fn defineProperties
			subscribers.makePublisher(this);
			this.subscribe("change", function(){
				self.minBalanceAlert();
				self.calculateBalance();
			});
	} //end: constr

	/*
	initializeAccount() sets the startBalance for the new Account instance
	 */
	Account.initializeAccount=function(startBalance, acctName) {
		if ((startBalance !== null) &&
			(typeof parseInt(startBalance) === "number")) {
			/*
			commented out acctName bc it is not utilised in this early app version
			 */
			var tempAcct = new Account (startBalance /*, acctName*/);
			return tempAcct;
		}//end: if

	};//end:fn
	/*
	calculateBalance() keeps a running talley for UI table display
	 */
	Account.prototype.calculateBalance = function() {
		var workingSum = this.startingBalance;
		for (var i = 0; i < this.transactions.length; i += 1){
			workingSum += this.transactions[i].amount;
		} //end: for
		this.currentBalance = workingSum;
	};//end: fn

	/*
	addTransaction()
	 */
	Account.prototype.addTransaction = function(amount, date, type, memo) {
		var tempDepositTransaction = new Transaction();
		var date_regex = /[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])/;
		// this.transactions.push(temptx);
		if ((amount !== null) &&
			//add base 10 radix parameter
			(typeof parseInt(amount, 10) === "number") &&
			(!(isNaN(amount))) && (amount !== 0)) {
			tempDepositTransaction.amount = amount;
		} else {
        	throw "Please enter a valid, nonzero amount.";
    	}//end if
		if ((date !== null) && ((date_regex.test(date)))) {
			tempDepositTransaction.date = date;
		} else {
        	throw "Please enter a valid date.";
		}//end if
		tempDepositTransaction.type = type;
		tempDepositTransaction.memo = memo;
		/*
		Add new tempDepositTransaction to Account transactions List
		 */
		this.transactions.push(tempDepositTransaction);
		//this.calculateBalance();
		this.notify('change', tempDepositTransaction);
	};//end: fn

	Account.prototype.editTransaction = function(id, amount, date, type, memo) {
		//loop through the transactions and get id
		var tempTransaction = null;
		var date_regex = /[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])/;

		for (var i = 0; i < this.transactions.length; i += 1) {
			//if passed id === transactions.id in array
			if (id === this.transactions[i].id) {
				tempTransaction = this.transactions[i];
				break;
			}//end: if
		}//end: for
		if (!(tempTransaction)) {
			throw "Transaction Id not found.";
		}//end: if
		if ((amount !== null) &&
			//add base 10 radix parameter
			(typeof parseInt(amount, 10) === "number") &&
			(!(isNaN(amount))) && (amount !== 0)){
				if ((date !== null) && (date_regex.test(date))){
					tempTransaction.amount = amount;
					tempTransaction.date = date;
					tempTransaction.type = type;
					tempTransaction.memo = memo;

					this.notify('change');
				} else {
					throw "Please enter a valid date.";
				}//:end if / else
		} else {
			throw "Please enter a valid, nonzero amount.";
		}//end if / else
	};//end: fn


	Account.prototype.deleteTransaction=function(id){
		for (var i = 0; i < this.transactions.length; i += 1) {
			//if passed id === transactions.id in array
			if (id === this.transactions[i].id) {
				// this.transactions[i] === null;
				this.transactions.splice(i, 1);
				this.notify('change');
				return;
			}//end: if
		}//end: for
	};//end: fn

	Account.prototype.minBalanceAlert = function() {
	    if(this.currentBalance<100)
		alert("Notice: This current balance is below $100. The current balance is: " +
					this.currentBalance + ".");
	};//end: fn

	Account.loadJSON = function(jsonData) {
		var tempAccount = new Account();
		tempAccount.accountName = jsonData.accountName;
		tempAccount.startingBalance = jsonData.startingBalance;

		for (var i = 0; i < jsonData.transactions.length; i += 1) {
			var tempTransaction = new Transaction();
			tempTransaction.amount = jsonData.transactions[i].amount;
			tempTransaction.date = jsonData.transactions[i].date;
			tempTransaction.type = jsonData.transactions[i].type;
			tempTransaction.memo = jsonData.transactions[i].memo;

			tempAccount.transactions[i] = tempTransaction;
		}//end: for

		tempAccount.currentBalance = jsonData.currentBalance;

		return tempAccount;
	};//end:fn

	/*
	re-format Account obj to make avail for JSON.stringify
	 */
	Account.prototype.toJSON = function() {
		return {
			accountName: this.accountName,
			startingBalance: this.startingBalance,
			transactions: this.transactions,
			currentBalance: this.currentBalance
		};
	};//end:fn

	/*
	modify js toString for console.log()
	 */
	Account.prototype.toString = function() {
		return "(" + this.accountName + ", " + this.startingBalance + ", " +
				this.transactions + ", " + this.currentBalance + ")";
	};//end: fn

	/*
	TRANSACTION
	 */
	 /**
	  * [Transaction constructor]
	  * @constructor
	  * @param {[type]} amt  [description]
	  * @param {[type]} date [description]
	  */
	 function Transaction(amt, date, type, memo) {
	 	/*
	 	self-invoking constructor
	 	 */
	 	if (!(this instanceof Transaction)) {
	 		return new Account(amt, date, type, memo);
	 	} //end: if
	 	//if (typeof amt === "number") {
	 	var amount = amt;
	 	var id = Transaction.idCounter++;

	 	var date = date;
	 	var type = type;
	 	var memo = memo;
		//}//end: if

		/*
		encapsulation with accessors
		 */
		Object.defineProperties(this,{
			amount: {
				get: function() {return amount;},
				set: function(val) {amount = val;}
			},
			id: {
				get: function() {return id;}
				// set: function(val) {id = val;}
			},
			date: {
				get: function() {return date;},
				set: function(val) {date = val;}
			},
			type: {
				get: function() {return type;},
				set: function(val) {type = val;}
			},
			memo: {
				get: function() {return memo;},
				set: function(val) {memo = val;}
			}
			});
	 }//end: constr

	 /*
	 re-format Transaction obj to make avail for JSON.stringify
	  */
	 Transaction.prototype.toJSON = function() {
		 return {
			 amount: this.amount,
			 id: this.id,
			 date: this.date,
			 type: this.type,
			 memo: this.memo
		 };
	 };//end:fn

	/*
	modify js toString for console.log()
	 */
	Transaction.prototype.toString = function() {
		return "(" + this.id + ", " + this.date + ", " + this.type +
				", " + this.memo + ")";
	};//end: fn


	Transaction.idCounter=0;

	//exports.Account = Account;
	//exports.Transaction = Transaction;

	/*
	TESTING
	 */

	// var testTransaction1 = new Transaction(3, 2015, 'CC', 'carrots');
	// var testTransaction2 = new Transaction(50, 2015, 'CC', 'Grey Goose');
	// var testTransaction3 = new Transaction(100, 2015, 'CK', "steaks");
	//
	// var jsonAcct = new Account();
	// jsonAcct.accountName = 'coleChecking';
	// jsonAcct.startingBalance = 1000;
	// jsonAcct.transactions.push(testTransaction1);
	// jsonAcct.transactions.push(testTransaction2);
	// jsonAcct.transactions.push(testTransaction3);
	//
	// try {
	// 	jsonAcct.addTransaction(100, '2015-10-23', 45, 65);
	// } catch(err) {
	// 	console.log(err);
	// }
	// jsonAcct.calculateBalance();
	//
	// jsonAcct.subscribe();
	//
	//
	//
	// var testJSON = JSON.stringify(jsonAcct);
	// console.log(JSON.stringify(jsonAcct));
	// var reconstitutedJSON = Account.loadJSON(JSON.parse(testJSON));
	// JSON.stringify(reconstitutedJSON);
	//
	// console.log(JSON.stringify(reconstitutedJSON));

	return {
		Account : Account,
		Transaction : Transaction
	};
});
